<!-- /templates/cart.liquid -->
{% comment %}

  For info on test orders:
    - General http://docs.shopify.com/manual/your-store/orders/test-orders
    - Shopify Payments - http://docs.shopify.com/manual/more/shopify-payments/testing-shopify-payments

{% endcomment %}
<div class="cart_page_custom">
  <div class="container">
    <div class="row">
      <div class="col-12">
        {% if cart.item_count > 0 %}
          <header class="section-header text-center">
            <h1 class="text-center">{{ 'cart.general.title' | t }}</h1>
            <hr class="hr--small">
          </header>
<div
  class="ov-app ov-app-aov-progress-bar"
  data-app-id="apb_nbo17tmjj1fbwv8"
  data-app="aov-progress-bar"></div>
        
          <form action="{{ routes.cart_url }}" method="post" novalidate class="cart">

            <div class="cart__row medium-down--hide cart__header-labels">
              <div class="grid--full">
                <div class="grid__item large--two-fifths push--large--three-fifths">
                  <div class="grid--full">
                    <div class="grid__item one-third medium-down--half text-center">
                      {{ 'cart.label.quantity' | t }}
                    </div>
                    <div class="grid__item two-thirds medium-down--half text-right">
                      {{ 'cart.label.total' | t }}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {% comment %}
              Loop through products in the cart
            {% endcomment %}
            {% for item in cart.items %}
              <div class="cart__row">
                <div class="grid--full cart__row--table-large">

                  <div class="grid__item large--three-fifths">
                    <div class="grid">

                      <div class="grid__item one-third splitfull">
                        <a href="{{ item.url | within: collections.all }}" class="cart__image">

                          {% comment %}
                            More image size options at:
                              - http://docs.shopify.com/themes/filters/product-img-url
                          {% endcomment %}
                          <img src="{{ item | img_url: 'medium' }}" alt="{{ item.title | escape }}">
                        </a>
                      </div>

                      <div class="grid__item two-thirds splitfull">
                        <a href="{{ item.url }}" class="h4 cart__product-name">
                          {{ item.product.title }}
                        </a>
                        {% unless item.variant.title contains 'Default' %}
                          <p class="cart__product-meta">
                            {{ item.variant.title }}
                          </p>
                        {% endunless %}

                        {% if settings.product_vendor_enable %}
                          <p class="cart__product-meta">{{ item.vendor }}</p>
                        {% endif %}

                        {% assign property_size = item.properties | size %}
                        {% if property_size > 0 %}
                          {% for p in item.properties %}
                            {% assign first_character_in_key = p.first | truncate: 1, '' %}
                            {% unless p.last == blank or p.first == "subscription_id" or p.first == "shipping_interval_frequency" or p.first == "shipping_interval_unit_type" or first_character_in_key == '_' %}
                              {{ p.first }}:

                              {% if p.last contains '/uploads/' %}
                                <a href="{{ p.last }}">{{ p.last | split: '/' | last }}</a>
                              {% else %}
                                {{ p.last }}
                              {% endif %}

                              
                            {% endunless %}
                              {% assign recurringchecked = "false" %} 
                              {% for p in item.properties  %}   
                              {% if p.first == 'shipping_interval_frequency' %}
                                  {% assign frequency = p.last %}
                                  {% assign recurringchecked = "true" %} 
                              {% endif %}
                              {% if p.first == 'shipping_interval_unit_type' %}
                                  {% if frequency == '1'%}
                                      {% if p.last == 'Days' %}
                                          {% assign frequency_unit = 'Day' %}
                                      {% elsif p.last == 'Months'%}
                                          {% assign frequency_unit = 'Month' %}
                                      {% elsif p.last == 'Weeks'%}
                                          {% assign frequency_unit = 'Week' %}
                                      {% endif %}
                                  {% else %}
                                      {% assign frequency_unit = p.last %}
                                  {% endif %}
                              {% endif %}
                              {% endfor %}
                          {% endfor %}
                          {% if recurringchecked == "true" %}
                           Delivery every {{frequency}} {{frequency_unit}}. Change or cancel anytime.
                          {% endif %}
                        {% endif %}
                        {% comment %}
                        <p class="cart__product-meta">
                          <a href="{{ routes.cart_change_url }}?line={{ forloop.index }}&amp;quantity=0">
                            {{ 'cart.general.remove' | t }}
                          </a>
                        </p>
                        {% endcomment %}
                        <p class="cart__product-meta">
                          <a href="">
                            {{ 'cart.general.remove' | t }}
                          </a>
                        </p>
                      </div>

                    </div>
                  </div>

                  <div class="grid__item large--two-fifths cart__pricing">
                    <div class="grid--full cart__row--table{% if item.line_level_discount_allocations != blank %} cart__row--table-with-discount{% endif %}">

                      <div class="grid__item one-third text-center">
 
                        <label for="updates_{{ item.key }}" class="visually-hidden">{{ 'cart.label.quantity' | t }}</label>
                        <input type="number" name="updates[]" id="updates_{{ item.key }}" class="cart__product-qty" value="{{ item.quantity }}" min="0" data-id="{{ item.key }}">

                      </div>

                      <div class="grid__item two-thirds text-right">

                        {%- if item.original_line_price != item.final_line_price -%}
                          <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
                          <del class="cart__price">{{ item.original_line_price | money }}</del>
                          <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
                          <span class="order-discount cart__price">{{ item.final_line_price | money }}</span>
                        {%- else -%}
                          <span class="cart__price">{{ item.original_line_price | money }}</span>
                        {%- endif -%}

                        {%- if item.unit_price_measurement -%}
                          <span class="visually-hidden">{{ 'products.general.unit_price' | t }}</span>
                          <span class="cart__unit-price">
                            {%- capture unit_price_separator -%}
                              <span aria-hidden="true">/</span><span class="visually-hidden">&nbsp;{{ 'general.accessibility.unit_price_separator' | t }}&nbsp;</span>
                            {%- endcapture -%}
                            {%- capture unit_price_base_unit -%}
                              {%- if item.unit_price_measurement.reference_value != 1 -%}
                                {{- item.unit_price_measurement.reference_value -}}
                              {%- endif -%}
                              {{ item.unit_price_measurement.reference_unit }}
                            {%- endcapture -%}

                            <span data-unit-price>{{ item.unit_price | money }}</span>{{- unit_price_separator -}}{{- unit_price_base_unit -}}
                          </span>
                        {%- endif -%}

                        {%- if item.line_level_discount_allocations != blank -%}
                          <ul class="order-discount order-discount--list order-discount--title order-discount--cart-list" aria-label="{{ 'customer.order.discount' | t }}">
                            {%- for discount_allocation in item.line_level_discount_allocations -%}
                              <li class="order-discount__item">
                                <span class="icon icon-saletag" aria-hidden="true"></span>{{ discount_allocation.discount_application.title }} (-{{ discount_allocation.amount | money }})
                              </li>
                            {%- endfor -%}
                          </ul>
                        {%- endif -%}

                      </div>
                    </div>
                  </div>

                </div>
              </div>
            {% endfor %}

            <div class="cart__row cart__row--last">
              <div class="grid--full cart__row--table-large">
                {%- comment -%}
                  Optional, add a textarea for special notes
                    - Your theme settings can turn this on or off. Default is on.
                    - Make sure you have name="note" for the message to be submitted properly
                {%- endcomment -%}
                {% if settings.cart_notes_enable %}
                <div class="grid__item large--seven-twelfths cart__note-container">
                  <div class="cart__note">
                    <label for="CartSpecialInstructions">{{ 'cart.general.note' | t }}</label>
                    <textarea name="note" class="input-full" id="CartSpecialInstructions">{{ cart.note }}</textarea>
                  </div>
                </div>
                {% endif %}

                <div class="grid__item large--five-twelfths text-center large--text-right{% if settings.cart_notes_enable %} cart__subtotal-container{% else %} push--large--seven-twelfths{% endif %}">
                  {%- if cart.cart_level_discount_applications != blank -%}
                  <div class="grid--full cart__row--table">
                    <div class="cart__discounts">
                      {%- for discount_application in cart.cart_level_discount_applications -%}
                        <span class="order-discount order-discount--title order-discount--cart">
                          <span class="icon icon-saletag" aria-hidden="true"></span><span class="visually-hidden">{{ 'customer.order.discount' | t }}:</span>{{- discount_application.title -}}
                        </span>
                        <span class="order-discount order-discount--cart">-{{ discount_application.total_allocated_amount | money }}</span>
                      {%- endfor -%}
                    </div>
                  </div>
                  {%- endif -%}
                  <div class="grid--full cart__row--table stotal">
                    <div class="grid__item one-half large--two-thirds large--text-center">
                      <p class="cart__subtotal">{{ 'cart.general.subtotal' | t }}</p>
                    </div>
                    <div class="grid__item one-half large--one-third">
                      <p class="cart__subtotal ov_total">{{ cart.total_price | money }}</p>
                    </div>
                  </div>
                  {%- capture taxes_shipping_checkout -%}
                    {%- if shop.taxes_included and shop.shipping_policy.body != blank -%}
                      {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                    {%- elsif shop.taxes_included -%}
                      {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
                    {%- elsif shop.shipping_policy.body != blank -%}
                      {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                    {%- else -%}
                      {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
                    {%- endif -%}
                  {%- endcapture -%}
                  <p class="rte"><em>{{ taxes_shipping_checkout }}</em></p>
                  {% comment %}
                  <p class="rte"><em>Free <a href="/policies/shipping-policy">shipping</a> on all orders. Taxes calculated at checkout.</em></p>
                  <div class="csp cta">
                    <a href="/collections/all" class="btn--secondary update-cart">Continue Shopping</a>
                  </div>
                  {% endcomment %}
                  
                  <button type="submit" name="update" class="btn--secondary update-cart  d-none">{{ 'cart.general.update' | t }}</button>

                  {% assign has_subscriptions = false %}
                    {% for i in cart.items %}
                      {% for p in i.properties %}
                      {% if p.first == 'shipping_interval_frequency' %}
                        {% assign has_subscriptions = true %}
                      {% endif %}
                    {% endfor %}
                  {% endfor %}

                  <button {% if has_subscriptions %} type="button" {% else %} type="submit" name="checkout" {% endif %} class="checkout_button btn cart__checkout">
                    {{ 'cart.general.checkout' | t }} <span class="icon icon-arrow-right" aria-hidden="true"></span>
                  </button>

                  {% if additional_checkout_buttons and settings.cart_type != 'drawer' %}
                    <div class="additional_checkout_buttons"><span class="additional-checkout-buttons">{{ content_for_additional_checkout_buttons }}</span></div>
                  {% endif %}
                  
                  <div class="cc-wrap">
                    <img src="{{ 'cards.jpg' | asset_url }}">
                  </div>
                </div>
            </div>

          </form>

        {% else %}
          {% comment %}
            The cart is empty
          {% endcomment %}
          <header class="section-header text-center">
            <h1 class="text-center">{{ 'cart.general.title' | t }}</h1>
            <hr class="hr--small">
            <p class="cart--empty-message">{{ 'cart.general.empty' | t }}</p>
            <p class="cart--continue-browsing">{{ 'cart.general.continue_browsing_html' | t: link: routes.all_products_collection_url }}</p>
            <p class="cookie-message">{{ 'cart.general.cookies_required' | t }}</p>
          </header>

        {% endif %}
      </div>
    </div>
  </div>
</div>

<style type="text/css">
  #your-shopping-cart .js-drawer-open-button-right {
    pointer-events: none;
  }
</style>

<script type="text/javascript">

  $(window).keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });

  setTimeout(function(){ 
    // When quanity input box is populated
    $("input[name='updates[]']").on('input', function(e) {
      //$( ".update-cart" ).trigger( "click" );
      var current_loc = $(this);
      var quantity_input = $(this).val();
      var str = $(this).attr("data-id");
      var quantity_ID = str.split(':')[0];


      // update data-qty
      var current_data_qty = quantity_input - 1;
      $(this).parents('.js-qty').find('.js-qty__adjust--minus').attr('data-qty', current_data_qty );

      // restore quantity on empty
      if (quantity_input  === ''   ) {
        $(this).parents('.js-qty').find('.js-qty__adjust--minus').attr('data-qty', '0' );
        $(this).val('1');
        $(this).text('1');
      } 
      if ( $(current_loc).text()  === '1' && quantity_input  === '' ) {
        $(this).parents('.js-qty').find('.js-qty__adjust--minus').attr('data-qty', '0' );
        $(this).val('1');
      } 
      
      //updated quantity custom
      $.post('/cart/change.js', { quantity: quantity_input, id: quantity_ID });
        setTimeout(function(){ 
            //add quantity custom
            $.getJSON('/cart.js', function(cart) {
       
              let items = cart.items;
              for(var i=0; i < items.length; i++){
                if (items[i].id == quantity_ID) {
                  //console.log(items[i].final_line_price);
                  var pop_total = items[i].final_line_price;

                }
              }

            // update column price
            $(current_loc).parents('.cart__pricing').find('.cart__price').text(Shopify.formatMoney(pop_total));

            // if quantity is 0
            if ( $(current_loc).parents('.cart__pricing').find('.cart__price').text() == "$0"   ) {
              $(current_loc).parents('.cart__row').hide("fast");
            }

            // update total price
            var outputTotal = (Shopify.formatMoney(cart.original_total_price));
            $('.cart_page_custom').find('.ov_total').text(outputTotal);

            // update cart icon
            var total_count = cart.item_count;
            $('.site-header').find('.cart-count').text(total_count);
          });  
        }, 1500);
        
          
    });
    // Quantity Selection Plus + 1
    $(".js-qty__adjust--plus").click(function() {

      var current_loc = $(this);
      var quantity_input = $(this).parent().find("input[name='updates[]']").val();
      var str = $(this).attr("data-id");
      var quantity_ID = str.split(':')[0];

      // update data-qty
      var current_data_qty = $(this).parent('.js-qty').find('.js-qty__adjust--minus').attr("data-qty");
      $(this).parents('.js-qty').find('.js-qty__adjust--minus').attr('data-qty', parseFloat(current_data_qty) + parseFloat(1) );

      //updated quantity custom
      $.post('/cart/change.js', { quantity: quantity_input, id: quantity_ID });
        setTimeout(function(){ 
            //add quantity custom
            $.getJSON('/cart.js', function(cart) {
       
              let items = cart.items;
              for(var i=0; i < items.length; i++){
                if (items[i].id == quantity_ID) {
                  //console.log(items[i].final_line_price);
                  var pop_total = items[i].final_line_price;

                }
              }

            // update column price
            $(current_loc).parents('.cart__pricing').find('.cart__price').text(Shopify.formatMoney(pop_total));

            // update total price
            var outputTotal = (Shopify.formatMoney(cart.original_total_price));
            $('.cart_page_custom').find('.ov_total').text(outputTotal);

            // update cart icon
            var total_count = cart.item_count;
            $('.site-header').find('.cart-count').text(total_count);
          });  
        }, 1000)

    });

    // Quantity Selection Plus - 1
    $(".js-qty__adjust--minus").click(function() {

      var current_loc = $(this);
      var quantity_input = $(this).parent().find("input[name='updates[]']").val();
      var str = $(this).attr("data-id");
      var quantity_ID = str.split(':')[0];

      // updated data-qty trigger
      var current_data_qty = $(this).attr("data-qty") - 1;
      $(this).attr('data-qty', current_data_qty);
      //console.log(current_data_qty);
      if ( current_data_qty < 0 ) {
        $(this).parents('.cart__row').find("input[name='updates[]']").val("0");
        var current_loc = $(this).parents('.cart__row').find("input[name='updates[]']");
        var quantity_input = 0;
        var str = $(this).parents('.cart__row').find("input[name='updates[]']").attr("data-id");
        var quantity_ID = str.split(':')[0];
        // remove entire column
        $(current_loc).parents('.cart__row').hide("fast");
      }
      
      //updated quantity custom
      $.post('/cart/change.js', { quantity: quantity_input, id: quantity_ID });
        setTimeout(function(){ 
            //add quantity custom
            $.getJSON('/cart.js', function(cart) {
       
              let items = cart.items;
              for(var i=0; i < items.length; i++){
                if (items[i].id == quantity_ID) {
                  //console.log(items[i].final_line_price);
                  var pop_total = items[i].final_line_price;

                }
              }

            // update column price
            $(current_loc).parents('.cart__pricing').find('.cart__price').text(Shopify.formatMoney(pop_total));

            // update total price
            var outputTotal = (Shopify.formatMoney(cart.original_total_price));
            $('.cart_page_custom').find('.ov_total').text(outputTotal);

            // update cart icon
            var total_count = cart.item_count;
            $('.site-header').find('.cart-count').text(total_count);
          });  
        }, 1000)

    });

    //when remove link is clicked
    $(".cart__product-meta a").click(function(e) {
      e.preventDefault();
      var current_loc = $(this).parents('.cart__row').find("input[name='updates[]']");
      var quantity_input = 0;
      var str = $(this).parents('.cart__row').find("input[name='updates[]']").attr("data-id");
      var quantity_ID = str.split(':')[0];
      
      //updated quantity custom
      $.post('/cart/change.js', { quantity: quantity_input, id: quantity_ID });
        setTimeout(function(){ 
            //add quantity custom
            $.getJSON('/cart.js', function(cart) {
       
              let items = cart.items;
              for(var i=0; i < items.length; i++){
                if (items[i].id == quantity_ID) {
                  //console.log(items[i].final_line_price);
                  var pop_total = items[i].final_line_price;

                }
              }

            // update column price
            $(current_loc).parents('.cart__pricing').find('.cart__price').text(Shopify.formatMoney(pop_total));

            // update total price
            var outputTotal = (Shopify.formatMoney(cart.original_total_price));
            $('.cart_page_custom').find('.ov_total').text(outputTotal);

            // update cart icon
            var total_count = cart.item_count;
            $('.site-header').find('.cart-count').text(total_count);

            // remove entire column
            $(current_loc).parents('.cart__row').hide("fast");

          });  
        }, 500)

    });

  }, 500);


</script>

   {{ 'api.jquery.js' | shopify_asset_url | script_tag }}